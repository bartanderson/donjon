json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.expression.left.type = "MemberExpression";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.expression.operator = "=";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.expression.right = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.expression.right.raw = "1";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.expression.right.type = "Literal";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.expression.right.value = 1;
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.expression.type = "AssignmentExpression";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.consequent.type = "ExpressionStatement";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.left = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.left.name = "c";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.operator = "<";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.right = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.right.name = "d";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.left.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.operator = "||";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.left = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.left.name = "c";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.operator = ">";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.right = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.right.name = "g";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.right.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.test.type = "LogicalExpression";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].body.type = "IfStatement";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.left = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.left.name = "c";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.operator = "=";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.right = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.right.raw = "0";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.right.type = "Literal";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.right.value = 0;
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].init.type = "AssignmentExpression";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.left = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.left.name = "c";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.operator = "<=";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right.computed = false;
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right.object = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right.object.name = "a";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right.object.type = "Identifier";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right.property = {};
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right.property.name = "n_cols";
json.body[1].expression.arguments[1].body.body[7].body.body[1].body.body[1].test.right.property.type = "Identifier";
