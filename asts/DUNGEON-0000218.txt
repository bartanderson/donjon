json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].test.right.type = "MemberExpression";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].test.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].type = "ForStatement";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].update = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].update.argument = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].update.argument.name = "C";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].update.argument.type = "Identifier";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].update.operator = "++";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].update.prefix = false;
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.body[1].update.type = "UpdateExpression";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].body.type = "BlockStatement";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.left = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.left.name = "r";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.operator = "=";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.right = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.right.raw = "0";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.right.type = "Literal";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.right.value = 0;
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].init.type = "AssignmentExpression";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.left = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.left.name = "r";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.operator = "<=";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right.computed = false;
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right.object = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right.object.name = "v";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right.object.type = "Identifier";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right.property = {};
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right.property.name = "n_rows";
json.body[1].expression.arguments[1].body.body[2].body.body[1].body[7].body[6].test.right.property.type = "Identifier";
