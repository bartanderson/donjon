json.body[1].expression.arguments[1].body.body[17].body.body[1].test.right.type = "MemberExpression";
json.body[1].expression.arguments[1].body.body[17].body.body[1].test.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[17].body.body[1].type = "ForStatement";
json.body[1].expression.arguments[1].body.body[17].body.body[1].update = {};
json.body[1].expression.arguments[1].body.body[17].body.body[1].update.argument = {};
json.body[1].expression.arguments[1].body.body[17].body.body[1].update.argument.name = "d";
json.body[1].expression.arguments[1].body.body[17].body.body[1].update.argument.type = "Identifier";
json.body[1].expression.arguments[1].body.body[17].body.body[1].update.operator = "++";
json.body[1].expression.arguments[1].body.body[17].body.body[1].update.prefix = false;
json.body[1].expression.arguments[1].body.body[17].body.body[1].update.type = "UpdateExpression";
json.body[1].expression.arguments[1].body.body[17].body.body[2] = {};
json.body[1].expression.arguments[1].body.body[17].body.body[2].argument = {};
json.body[1].expression.arguments[1].body.body[17].body.body[2].argument.name = "f";
json.body[1].expression.arguments[1].body.body[17].body.body[2].argument.type = "Identifier";
json.body[1].expression.arguments[1].body.body[17].body.body[2].type = "ReturnStatement";
json.body[1].expression.arguments[1].body.body[17].body.type = "BlockStatement";
json.body[1].expression.arguments[1].body.body[17].expression = false;
json.body[1].expression.arguments[1].body.body[17].generator = false;
json.body[1].expression.arguments[1].body.body[17].id = {};
json.body[1].expression.arguments[1].body.body[17].id.name = "calculatePotentialStairLocations";
json.body[1].expression.arguments[1].body.body[17].id.type = "Identifier";
json.body[1].expression.arguments[1].body.body[17].params = [];
json.body[1].expression.arguments[1].body.body[17].params[0] = {};
json.body[1].expression.arguments[1].body.body[17].params[0].name = "a";
json.body[1].expression.arguments[1].body.body[17].params[0].type = "Identifier";
json.body[1].expression.arguments[1].body.body[17].type = "FunctionDeclaration";
json.body[1].expression.arguments[1].body.body[18] = {};
json.body[1].expression.arguments[1].body.body[18].async = false;
json.body[1].expression.arguments[1].body.body[18].body = {};
json.body[1].expression.arguments[1].body.body[18].body.body = [];
json.body[1].expression.arguments[1].body.body[18].body.body[0] = {};
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations = [];
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0] = {};
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].id = {};
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].id.name = "g";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].id.type = "Identifier";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init = {};
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init.argument = {};
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init.argument.raw = "0";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init.argument.type = "Literal";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init.argument.value = 0;
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init.operator = "!";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init.prefix = true;
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].init.type = "UnaryExpression";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[0].type = "VariableDeclarator";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[1] = {};
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[1].id = {};
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[1].id.name = "c";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[1].id.type = "Identifier";
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[1].init = null;
json.body[1].expression.arguments[1].body.body[18].body.body[0].declarations[1].type = "VariableDeclarator";
json.body[1].expression.arguments[1].body.body[18].body.body[0].kind = "let";
json.body[1].expression.arguments[1].body.body[18].body.body[0].type = "VariableDeclaration";
json.body[1].expression.arguments[1].body.body[18].body.body[1] = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].alternate = null;
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.alternate = null;
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument.argument = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument.argument.raw = "1";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument.argument.type = "Literal";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument.argument.value = 1;
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument.operator = "!";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument.prefix = true;
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.argument.type = "UnaryExpression";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.consequent.type = "ReturnStatement";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions = [];
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0] = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments = [];
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0] = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].async = false;
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body = [];
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0] = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.computed = true;
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.object = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.object.name = "a";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.object.type = "Identifier";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.left = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.left.name = "b";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.operator = "+";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.computed = true;
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.object = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.object.name = "e";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.object.type = "Identifier";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.property = {};
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.property.raw = "0";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.property.type = "Literal";
json.body[1].expression.arguments[1].body.body[18].body.body[1].consequent.test.expressions[0].arguments[0].body.body[0].expression.left.left.property.right.property.value = 0;
