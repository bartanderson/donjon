json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.left.type = "MemberExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.operator = "=";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments = [];
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0] = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].alternate = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].alternate.name = "d";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].alternate.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].consequent = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].consequent.name = "c";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].consequent.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.left.name = "c";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.operator = "<";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.right.name = "d";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].test.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.arguments[0].type = "ConditionalExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.callee = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.callee.name = "random";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.callee.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.left.type = "CallExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.operator = "+";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.right.name = "g";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.right.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].expression.type = "AssignmentExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.body[2].type = "ExpressionStatement";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.consequent.type = "BlockStatement";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.left.raw = "\"i\"";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.left.type = "Literal";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.left.value = "i";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.operator = "in";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.right.name = "b";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.test.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].consequent.type = "IfStatement";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.left.raw = "\"height\"";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.left.type = "Literal";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.left.value = "height";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.operator = "in";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.right.name = "b";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.argument.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.operator = "!";
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.prefix = true;
json.body[1].expression.arguments[1].body.body[10].body.body[6].test.type = "UnaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[6].type = "IfStatement";
json.body[1].expression.arguments[1].body.body[10].body.body[7] = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.left.raw = "\"width\"";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.left.type = "Literal";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.left.value = "width";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.operator = "in";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.right.name = "b";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.left.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.operator = "||";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left.computed = false;
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left.object = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left.object.name = "b";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left.object.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left.property = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left.property.name = "width";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.alternate.left.property.type = "Identifier";
