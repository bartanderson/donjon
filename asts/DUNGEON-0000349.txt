json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].left.type = "MemberExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].operator = "=";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments = [];
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0] = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].alternate = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].alternate.name = "d";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].alternate.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].consequent = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].consequent.name = "c";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].consequent.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.left.name = "c";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.operator = "<";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.right.name = "d";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].test.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.arguments[0].type = "ConditionalExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.callee = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.callee.name = "random";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.callee.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.left.type = "CallExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.operator = "+";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.right.name = "g";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].right.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.expressions[2].type = "AssignmentExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.consequent.type = "SequenceExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.left.raw = "\"j\"";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.left.type = "Literal";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.left.value = "j";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.operator = "in";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.right.name = "b";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.test.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.right.type = "ConditionalExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].expression.type = "LogicalExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[7].type = "ExpressionStatement";
json.body[1].expression.arguments[1].body.body[10].body.body[8] = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.left.raw = "\"i\"";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.left.type = "Literal";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.left.value = "i";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.operator = "in";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.right.name = "b";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.right.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.left.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.operator = "||";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left.computed = false;
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left.object = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left.object.name = "b";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left.object.type = "Identifier";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left.property = {};
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left.property.name = "i";
json.body[1].expression.arguments[1].body.body[10].body.body[8].expression.right.left.property.type = "Identifier";
