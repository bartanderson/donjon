json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.alternate.test.right.type = "MemberExpression";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.alternate.test.type = "BinaryExpression";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.alternate.type = "ConditionalExpression";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.left = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.left.name = "a";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.left.type = "Identifier";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.operator = "=";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.arguments = [];
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.arguments[0] = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.arguments[0].name = "a";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.arguments[0].type = "Identifier";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.callee = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.callee.name = "ya";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.callee.type = "Identifier";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.right.type = "CallExpression";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.consequent.type = "AssignmentExpression";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.left = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.left.raw = "\"saltire\"";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.left.type = "Literal";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.left.value = "saltire";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.operator = "==";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right.computed = false;
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right.object = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right.object.name = "a";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right.object.type = "Identifier";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right.property = {};
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right.property.name = "dungeon_layout";
json.body[1].expression.arguments[1].body.body[3].body.body[16].expression.alternate.test.right.property.type = "Identifier";
